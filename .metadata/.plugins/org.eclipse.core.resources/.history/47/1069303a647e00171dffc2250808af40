//
// project	: back to back inverter 
// pcb		: dfig_dsp.0104.BK.sch ~pcb
// work dir : d:\dspBack2back\Inverter\src
// date		: 2012.04.17 Tuesday
// 			by Soonkil Cheoung. CEO Eunwho Power Electronics

#include	<header.h>
#include	<extern.h>

/*
#define LPF_2nd_INIT(zeta,wn,Ts,x,y,k)   x[0]=0.; x[1]=0.; x[2]=0.;\
                              y[0]=0.; y[1]=0.; y[2]=0.;\
                              k[0]=1./(4.+4.*zeta*wn*Ts+wn*wn*Ts*Ts);\
                              k[1]=8.-2.*wn*wn*Ts*Ts;\
                              k[2]=4.*zeta*wn*Ts-wn*wn*Ts*Ts-4.;\
                              k[3]=wn*wn*Ts*Ts

*/

// for Low Pass Filter

void LPF_2nd_INIT(double zeta, double cutoff_freq, double Ts, double *x, double *y, double *k)
{
	double wn;

	wn = 2.0 * PI * cutoff_freq ;

   * x = *(x +1) =  *(x +2) = 0.0 ;
   * y = *(y +1) =  *(y +2) = 0.0 ;

    * k    = 1./ (4.+4.*zeta*wn*Ts+wn*wn*Ts*Ts);
	*(k+1) = 8.0 - 2.0 * wn * wn * Ts * Ts;
	*(k+2) = 4.0 * zeta * wn * Ts - wn * wn * Ts * Ts -4.0;
	*(k+3) = wn*wn*Ts*Ts;
}
/*
#define LPF_2nd(x,y,k)   y[0]=k[0]*(k[1]*y[1]+k[2]*y[2]+k[3]*(x[0]+2.*x[1]+x[2]));\
                  y[2]=y[1];\
                  y[1]=y[0];\
                  x[2]=x[1];\
                  x[1]=x[0]
*/
void LPF_2nd(double * x,double * y, double * K)
{
	int i;
	double k[4];

	for ( i = 0 ; i< 4; i++)	k[i] = *(K + i);
    
    *y = k[0]*( k[1]*( *(y+1)) + k[2]*( *(y+2)) + k[3]*( (*x) + 2.*(*(x+1)) + (*(x+2))) );

	*(y+2) = *(y+1); 
	*(y+1) = * y; 	
	*(x+2) = *(x+1);
	*(x+1) = * x;
}


double LPF_zeta=0.707;
//--- DC link Voltage Low Pass
double LPF_Vdc_cutoff_freq = 1000.0;
double LPF_Vdc_in[3];
double LPF_Vdc_out[3];
double LPF_Vdc_K[4];

#if CONVERTER_ON 
//--- Udq Low Pass
double LPF_Udq_cutoff_freq  =1000.0;
double LPF_U_d_in[3];
double LPF_U_d_out[3];
double LPF_U_d_K[4];

double LPF_U_q_in[3];
double LPF_U_q_out[3];
double LPF_U_q_K[4];

//--- Theta Low Pass
double LPF_We_E_st_cutoff_freq = 600.0;
double LPF_We_E_st_in[3];
double LPF_We_E_st_out[3];
double LPF_We_E_st_K[4];

//--- AC source Voltage Low Pass
double LPF_V_rst_curoff_freq = 1000.0;
double LPF_V_rs_in[3],LPF_V_st_in[3],LPF_V_tr_in[3];
double LPF_V_rs_out[3],LPF_V_st_out[3],LPF_V_tr_out[3];
double LPF_V_rs_K[4],LPF_V_st_K[4],LPF_V_tr_K[4];

//--- AC Input Current Low Pass
double LPF_I_rst_cutoff_freq =5000.0;
double LPF_I_r_in[3],LPF_I_s_in[3],LPF_I_t_in[3];
double LPF_I_r_out[3],LPF_I_s_out[3],LPF_I_t_out[3];
double LPF_I_r_K[4],LPF_I_s_K[4],LPF_I_t_K[4];
#endif


//--- AC Current Low Pass
double LPF_I_uvw_cutoff_freq = 5000.0;

double LPF_I_u_in[3], LPF_I_v_in[3], LPF_I_w_in[3];
double LPF_I_u_out[3], LPF_I_v_out[3], LPF_I_w_out[3]; 
double LPF_I_u_K[4], LPF_I_v_K[4],LPF_I_w_K[4];


// end of define LPF vari

#if CONVERTER_ON
void Init_Filters_Converter()
{
   LPF_2nd_INIT(LPF_zeta,LPF_V_dq_cutoff_freq, Ts, LPF_V_d_in, LPF_V_d_out, LPF_V_d_K);
   LPF_2nd_INIT(LPF_zeta,LPF_V_dq_cutoff_freq, Ts, LPF_V_q_in, LPF_V_q_out, LPF_V_q_K);

    // Angle Estimatin
   LPF_2nd_INIT(LPF_zeta,LPF_We_V_st_cutoff_freq, Ts, LPF_We_V_st_in,LPF_We_V_st_out,LPF_We_V_st_K);

   LPF_2nd_INIT( LPF_zeta, LPF_V_rst_cutoff_freq, Ts, LPF_V_rs_in, LPF_V_rs_out, LPF_V_rs_K);
   LPF_2nd_INIT( LPF_zeta, LPF_V_rst_cutoff_freq, Ts, LPF_V_st_in, LPF_V_st_out, LPF_V_st_K);
   LPF_2nd_INIT( LPF_zeta, LPF_V_rst_cutoff_freq, Ts, LPF_V_tr_in, LPF_V_tr_out, LPF_V_tr_K);
   
   // 3-phase phase current
   LPF_2nd_INIT( LPF_zeta, LPF_I_rst_cutoff_freq, Ts, LPF_I_r_in, LPF_I_r_out, LPF_I_r_K);
   LPF_2nd_INIT( LPF_zeta, LPF_I_rst_cutoff_freq, Ts, LPF_I_s_in, LPF_I_s_out, LPF_I_s_K);
   LPF_2nd_INIT( LPF_zeta, LPF_I_rst_cutoff_freq, Ts, LPF_I_t_in, LPF_I_t_out, LPF_I_t_K);
}

void AD2LPF_converter(void)
{
	LPF_V_rs_in[0] = ADC_V_rs;
	LPF_2nd(LPF_V_rs_in, LPF_V_rs_out, LPF_V_rs_K);
    V_rs = LPF_V_rs_out[0];

	LPF_V_st_in[0] = ADC_V_st;
	LPF_2nd(LPF_V_st_in, LPF_V_st_out, LPF_V_st_K);
    V_st = LPF_V_st_out[0];

	LPF_V_tr_in[0] = ADC_V_tr;
	LPF_2nd(LPF_V_tr_in, LPF_V_tr_out, LPF_V_tr_K);
    V_tr = LPF_V_tr_out[0];

	LPS_I_r_in[0] = ADC_I_r;
	LPF_2nd( LPF_I_r_in, LPF_I_r_out, LPF_I_r_K);
	I_r = LPF_I_r_out[0];

	LPS_I_s_in[0] = ADC_I_s;
	LPF_2nd( LPF_I_s_in, LPF_I_s_out, LPF_I_s_K);
	I_s = LPF_I_s_out[0];

	I_t = -( I_r + I_s);
} 
#endif

void Init_Filters_inverter()
{
   // 3-phase phase output current
   LPF_2nd_INIT(LPF_zeta,LPF_I_uvw_cutoff_freq, Ts, LPF_I_u_in, LPF_I_u_out, LPF_I_u_K);
   LPF_2nd_INIT(LPF_zeta,LPF_I_uvw_cutoff_freq, Ts, LPF_I_v_in, LPF_I_v_out, LPF_I_v_K);
}

void AD2LPF_inverter(void)
{
	LPF_I_u_in[0] = ADC_I_u;
	LPF_2nd(LPF_I_u_in, LPF_I_u_out, LPF_I_u_K);
	Is_abc[as] = LPF_I_u_out[0];

	LPF_I_v_in[0] = ADC_I_v;
	LPF_2nd(LPF_I_v_in, LPF_I_v_out, LPF_I_v_K);
	Is_abc[bs] = LPF_I_v_out[0];
} 

void Init_Filters( )
{
   // DC-Link Voltage
   LPF_2nd_INIT(LPF_zeta,LPF_Vdc_cutoff_freq,Ts, LPF_Vdc_in, LPF_Vdc_out, LPF_Vdc_K);

#if CONVERTER_ON
	Init_Filters_converter( );
#endif

	Init_Filters_inverter( );
}
   
void AD2LPF(void)
{
	LPF_Vdc_in[0] = ADC_Vdc;
	LPF_2nd( LPF_Vdc_in, LPF_Vdc_out, LPF_Vdc_K);
	Vdc = LPF_Vdc_out[0];

#if CONVERTER_ON
	AD2LPF_converter( );
#endif

	AD2LPF_inverter( );
} 
// end of low_pass_filter
